# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IdentifProj
                                 A QGIS plugin
 IdentifProj
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-12
        git sha              : $Format:%H$
        copyright            : (C) 2024 by leonie leroux
        email                : leonie.leroux@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsPointXY
from qgis.core import QgsCoordinateReferenceSystem
from qgis.core import QgsReferencedPointXY
from qgis.core import QgsCoordinateTransform
from qgis.core import QgsProject
from qgis.core import QgsRectangle
from qgis.core import QgsCoordinateTransformContext
from qgis.core import QgsCsException
from qgis.core import QgsCoordinateReferenceSystem, QgsProviderRegistry

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .IdentifProj_dockwidget import IdentifProjDockWidget
import os.path
import json

#import config_bbox


class IdentifProj:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'IdentifProj_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&IdentifProj')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'IdentifProj')
        self.toolbar.setObjectName(u'IdentifProj')

        #print "** INITIALIZING IdentifProj"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('IdentifProj', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/IdentifProj/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING IdentifProj"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD IdentifProj"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&IdentifProj'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING IdentifProj"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = IdentifProjDockWidget() #construction - mettre des actions ici, config
                self.calc_BBox()
                self.dockwidget.btGetCoord.clicked.connect(self.identifProj) #essayer d'ajouter une condition pour ne pas entrer un integer

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
    #--------------------------------------------------------------------------
     
    def identifProj(self):
        """
        """
        
        ##Récupération des coordonnées entrées par l'utilisateur
        x = self.dockwidget.x.text()
        y = self.dockwidget.y.text()
        print("récuperation des coordonnées:", x, y)
        
        try:
            X = float(x)
            Y = float(y)
        
        except ValueError:
            print("Erreur : les coordonnées doivent être des nombres valides.")
            return
        
        point = QgsPointXY(X,Y)
        print(point)
        
        ##Tester les différents SRC disponibles dans la BDD QGIS
        crs = QgsCoordinateReferenceSystem()
        liste_crs = crs.validSrsIds()
        
        liste_valid_crs = []
        liste_valid_pt = []
        #print(liste_crs)
        
        #Parcourir la liste, créer un objet SRC et tester la coordonnée en entrée
        # for i in range (20):
        #for elem in liste_crs:
        for i in range(200):
            crs_WGS = QgsCoordinateReferenceSystem('EPSG:4326')
            crs_test = crs.fromSrsId(liste_crs[i])
            #print(crs_test)
            
            context = QgsProject.instance().transformContext()
            transformer = QgsCoordinateTransform(crs_test,crs_WGS, context)
            
            # Vérifie si la transformation est valide
            if not transformer.isValid():
                print(f"Transformation non valide pour le CRS EPSG:{elem}")
                continue

            try:
            # Transformation du point
                pt_test = transformer.transform(point)
            except QgsCsException as e:
                print(f"Erreur de transformation pour EPSG:{crs_test} : {e}")
                continue
            
            #pt_test = transformer.transform(point) #transformation du point avec le SRC à tester en WGS84
            #print(pt_test)
            
            valid_area = crs_test.bounds()
            #print(valid_area)
            
            if valid_area.contains(pt_test):
                pt = QgsReferencedPointXY(point, crs_test)
                liste_valid_pt.append(pt)
                liste_valid_crs.append(crs_test)
                print("Ce point fait sens dans la projection.")
            else:
                #print("Le point ne peut pas avoir cette projection.")
                pass
                
                
        print("liste des SRC valide pour ce point", liste_valid_crs)
        
    
    def calc_BBox(self):
    
        # Liste pour stocker les différents SRC dans QGIS
        crs_WGS = QgsCoordinateReferenceSystem('EPSG:4326')
        crs = QgsCoordinateReferenceSystem()
        liste_crs = crs.validSrsIds()
        crs_json = []
        
        for crs_id in liste_crs:
            crs = crs.fromSrsId(crs_id)
            print(crs)
            
            if crs.isValid():
                bounds = crs.bounds()  # Bounding box en WGS 84
                
                if not bounds.isNull():
                    context = QgsProject.instance().transformContext()
                    transformer = QgsCoordinateTransform(crs_WGS, crs, context)
                    
                    #on va chercher les coins de la bounding box - 2 par définition
                    x_min = bounds.xMinimum()
                    y_min = bounds.yMinimum()
                    x_max = bounds.xMaximum()
                    y_max = bounds.yMaximum()
                    
                    #on cherche ensuite les 4 coins de la bbox (car les bounds transformées formeront un polygone plus ou moins
                    #rectangle en fonction de la projection) + on les transforme dans la projection de la boucle
                    try:
                        c_ll = transformer.transform(QgsPointXY(x_min,y_min))
                        c_lu = transformer.transform(QgsPointXY(x_min,y_max))
                        c_uu = transformer.transform(QgsPointXY(x_max,y_max))
                        c_ul = transformer.transform(QgsPointXY(x_max,y_min))
                    except QgsCsException as e:
                        print(f"Erreur de transformation pour EPSG:{crs} : {e}")
                        continue
                    
                    
                    crs_info = {
                        "auth_id": crs.authid(),
                        "name": crs.description(),
                        "bounding_box_WGS84": {
                            "x_min": bounds.xMinimum(),
                            "y_min": bounds.yMinimum(),
                            "x_max": bounds.xMaximum(),
                            "y_max": bounds.yMaximum()
                        },
                        "transform_bounds": {
                            "c_ll": (c_ll.x(), c_ll.y()),
                            "c_lu": (c_lu.x(), c_lu.y()),
                            "c_uu": (c_uu.x(), c_uu.y()),
                            "c_ul": (c_ul.x(), c_ul.y())
                            }
                    }
                    crs_json.append(crs_info)
                    
                #break
        
        ## Exporter en fichier JSON
        # Obtenir le répertoire du fichier script .py
        script_dir = os.path.dirname(__file__)
        # Définir le chemin du dossier 'config'
        config_dir = os.path.join(script_dir, "config")
    
        # Vérifier si le dossier 'config' existe, sinon le créer
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
            print(f"Dossier 'config' créé à : {config_dir}")
        else:
            print(f"Dossier 'config' déjà existant à : {config_dir}")
    
        # Définir le chemin du fichier JSON dans le dossier 'config' + exporter
        output_file = os.path.join(config_dir, "crs_with_bounds.json")
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(crs_json, f, ensure_ascii=False, indent=4)
        
        print(f"Fichier JSON généré : {output_file}")
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        